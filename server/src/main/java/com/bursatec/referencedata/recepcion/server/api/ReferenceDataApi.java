/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.12-1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.bursatec.referencedata.recepcion.server.api;

import java.util.List;

import com.bursatec.referencedata.recepcion.server.model.ReferenceData;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-21T18:22:12.534Z")

@Api(value = "referenceData", description = "the referenceData API")
public interface ReferenceDataApi {

    @ApiOperation(value = "Receives heartbeats.", nickname = "receiveHeartBeat", notes = "", tags={ "BMV", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful operation."),
            @ApiResponse(code = 400, message = "Invalid request, invalid or absent parameters."),
            @ApiResponse(code = 401, message = "Unauthorized - Authorization information is missing or invalid."),
            @ApiResponse(code = 500, message = "Unexpected error, internal error.") })
    @RequestMapping(value = "/v1/referenceData/heartbeat",
            method = RequestMethod.POST)
    ResponseEntity<Void> receiveHeartBeat(@NotNull @ApiParam(value = "The user name for login", required = true) @Valid @RequestParam(value = "userid", required = true) String userid, @NotNull @ApiParam(value = "The user name for login", required = true) @Valid @RequestParam(value = "password", required = true) String password, @NotNull @ApiParam(value = "Last sequence generated by receive operation", required = true) @Valid @RequestParam(value = "refDataId", required = true) Long refDataId);


    @ApiOperation(value = "Receives Data Reference.", nickname = "receiveRefData", notes = "", tags={ "BMV", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation."),
        @ApiResponse(code = 400, message = "Invalid request, invalid or absent parameters."),
        @ApiResponse(code = 401, message = "Unauthorized - Authorization information is missing or invalid."),
        @ApiResponse(code = 500, message = "Unexpected error, internal error.") })
    @RequestMapping(value = "/v1/referenceData/receive",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> receiveRefData(@NotNull @ApiParam(value = "The user name for login", required = true) @Valid @RequestParam(value = "userid", required = true) String userid,@NotNull @ApiParam(value = "The user name for login", required = true) @Valid @RequestParam(value = "password", required = true) String password,@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<ReferenceData> referenceData);

}
